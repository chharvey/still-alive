extends _docs.tpl.jade

block append vars
  - var page = Docs.DOCS.find('code.html')

block append styles
  style.
    table.demo th,
    table.demo td {
      padding: 2px;
      border: 1px solid #888;
    }

block append toc
  //- dl._docmeta
    dt Authors
    dd(itemprop="author") Chris Harvey
    dt Description
    dd(itemprop="description") Coding principles for conference sites.
    dt Keywords
    dd(itemprop="keywords") style guide
    dd(itemprop="keywords") coding
    dd(itemprop="keywords") HTML
    dd(itemprop="keywords") CSS
    dt Version History
    dd: time(datetime="2016-01-19 14:34") Jan 19, 2016 #[span.tod  2:34 PM]
    dd: time(datetime="2016-01-20 16:11") Jan 20, 2016 #[span.tod  4:11 PM]
    dd: time(datetime="2016-01-22 17:48") Jan 22, 2016 #[span.tod  5:48 PM]
    dd: time(datetime="2016-02-07 14:47") Feb 07, 2016 #[span.tod  2:47 PM]
    dd: time(datetime="2016-02-08 09:22") Feb 08, 2016 #[span.tod  9:22 AM]
    dd
      time(datetime="2016-02-15 18:33" itemprop="dateCreated") Feb 15, 2016 #[span.tod  6:33 PM]
    dd: time(datetime="2016-02-15 14:31") Feb 16, 2016 #[span.tod  2:31 PM]
    dd: time(datetime="2016-03-07 17:18") Mar  7, 2016 #[span.tod  5:18 PM]
    dd: time(datetime="2016-03-08 15:33") Mar  8, 2016 #[span.tod  3:33 PM]
    dd: time(datetime="2016-03-09 15:25") Mar  9, 2016 #[span.tod  3:25 PM]
    dd: time(datetime="2016-03-24 11:00") Mar 24, 2016 #[span.tod 11:00 AM]
    dd
      time(datetime="2016-04-19 21:00" itemprop="dateModified") Apr 19, 2016 #[span.tod 9:00 PM]

block append main
  div(itemscope="" itemtype="http://schema.org/TechArticle")
    p.
      #[strong General Principles.] As
      #[a(href="http://nicolasgallagher.com/") Nicolas Gallagher]
      states, all the code in a codebase should look like
      a single person typed it, no matter how many people contribute.
      There should be an agreed-upon style, which should be striclty enforced
      (reverting to existing common patterns when unspecified or in doubt).
      This is the purpose of this coding style guide.
      Remember that this guide applies to #[em hand-typed] code only.
      Code that is automatically generated by scripts or other means
      obviously may not abide by the rules set fourth in this guide.
    p.
      Note that the coding styles prescribed in this styleguide are
      #[strong specific, opinionated styles for this site&rsquo;s codebase].
      This is not #[em the] rulebook for all projects.
      However, you may extend this guide to other projects if you wish.
    +newSection(Docs.DOCS.find('code.html#textual-structure'))
      +newSection(Docs.DOCS.find('code.html#whitespace'), 3)
        ul
          li Use whitespace consistently and to improve code readability.
          li Always use spaces, never tabs.
          li Never leave trailing whitespace at the end of a line.
          li Use spaces to horizontally align repeated text.
      +newSection(Docs.DOCS.find('code.html#line-breaks-line-length'), 3)
        ul
          li Blank lines are permitted, but only if they do not contain any spaces.
          li Use blank lines #[em only] to separate code structures and improve readability.
          li Keep lines of all code between 75&ndash;90 characters long to maximize readability.
          li.
            When writing long passages of prose (in HTML, etc.), use
            hard line breaks to wrap text. This will help diff tools and
            reduce merge conflicts.
        section
          h4 Exceptions
          ul
            li Line breaks may be omitted when multiple, parallel code structures can fit on one line.
            li Line breaks may be introduced to improve readability and produce more useful diffs.
      +newSection(Docs.DOCS.find('code.html#indentation'), 3)
        ul
          li Use exactly two (2) spaces for each indent level.
      +newSection(Docs.DOCS.find('code.html#html-specifics-example'), 3)
        figure: pre.
          &lt;p&gt;99% of the time, block-level elements get their own line.&lt;/p&gt;
          &lt;div&gt;
            &lt;p&gt;Use line breaks and indentation within elements to separate blocks.&lt;/p&gt;
            &lt;p&gt;Line length is kept around 75–90 chars.&lt;/p&gt;
            &lt;p&gt;Line breaks within long passages
              of text content are allowed.&lt;/p&gt;
          &lt;/div&gt;
          &lt;p&gt;
            This is bad!!
            Do not do this!
            Text content does *not* count as a block element.
          &lt;/p&gt;
          &lt;p&gt;Inline elements &lt;del&gt;may&lt;/del&gt;
            &lt;ins&gt;should&lt;/ins&gt; be written &lt;em&gt;in-line&lt;/em&gt; with text.&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;p&gt;Here is an exception to the line-break rule:&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;Line breaks may be omitted for only-child elements that take up one line.&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;&lt;p&gt;*Do not do this* if you must use
              a line break!&lt;/p&gt;&lt;/li&gt;
            &lt;li&gt;
              &lt;p&gt;With line breaks, this is a better option:
                the p gets its own line and is indented.&lt;/p&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
      +newSection(Docs.DOCS.find('code.html#css-specifics-example'), 3)
        figure: pre.
          /* CSS selectors usually get their own line. */
          .class1 &gt; .child,
          .class2 + .child,
          .selector {
            /* 99% of the time, CSS rules get their own line, and are indented. */
            margin: 0 0 1rem;
            line-height: 1.25;
          }
          /* Line breaks may be omitted for parallel structures. */
          .column-1 { width: 100%; margin-left:  0%; }
          .column-2 { width:  50%; margin-left: 50%; }
          .column-3 { width:  33%; margin-left: 67%; }
          .column-4 { width:  25%; margin-left: 75%; }
          .selector {
            /*
             * Line breaks may be introduced to improve readability,
             * code editing, and more useful diffs.
             * Prepend spaces to align repeated text.
             */
            background-image: linear-gradient(#fff, #ccc),
                              linear-gradient(#f3c, #4ec);
            box-shadow: 1px 1px 1px     #000,
                        2px 2px 1px 1px #ccc inset;
            -webkit-transform: translate(100px) rotate(20deg);
               -moz-transform: translate(100px) rotate(20deg);
                    transform: translate(100px) rotate(20deg);
          }
    +newSection(Docs.DOCS.find('code.html#code-formatting'))
      +newSection(Docs.DOCS.find('code.html#html-specifics'), 3)
        ul
          li.
            Always use lowercase for names of tags and attributes.
            Only use capital letters inside attribute values and in text content.
          li Omit spaces immediately inside tags and inside attribute values.
          li Always include a slash, but not a space, for a self-closing tag.
          li Always use double-quotes for attribute values&mdash;even one-word values and empty values.
          li Always use single-quotes for strings within attribute values.
          li Close all tags, even if not required.
          li Always use the empty string for #[a boolean attributes].
        table.demo
          thead: tr
            th(scope="col") Correct
            th(scope="col") Incorrect
          tbody
            tr
              td: code.
                &lt;th scope="col"&gt;…&lt;/th&gt;
                #[br]
                &lt;img alt="The wolf replied, 'The better to see you with, my dear!'"/&gt;
              td: code &lt;TH SCOPE="col"&gt;…&lt;/TH&gt;
            tr
              td: code &lt;li&gt;no space immediately inside tags&lt;/li&gt;
              td: code &lt;li&gt; space immediately inside tags &lt;/li&gt;
            tr
              td: code &lt;hr/&gt;
              td: code &lt;hr /&gt;
            tr
              td: code &lt;input value="no space immediately inside quotes"/&gt;
              td: code &lt;input value=" space immediately inside quotes "/&gt;
            tr
              td: code &lt;img itemprop="logo"/&gt;
              td: code &lt;img itemprop=logo/&gt;
            tr
              td: code &lt;img alt="The wolf replied, 'The better to see you with, my dear!'"/&gt;
              td: code &lt;img alt="The wolf replied, "The better to see you with, my dear!""/&gt;
            tr
              td: code &lt;br/&gt;
              td: code &lt;br&gt;
            tr
              td: code.
                &lt;li&gt;a list item&lt;/li&gt;
                #[br]
                &lt;li&gt;another list item&lt;/li&gt;
              td: code.
                &lt;li&gt;a list item
                #[br]
                &lt;li&gt;another list item
            tr
              td: code &lt;input checked=""/&gt;
              td: code &lt;input checked/&gt;
      +newSection(Docs.DOCS.find('code.html#css-less-specifics'), 3)
        ul
          li.
            Always use lowercase for tag selectors, and for property names and values.
            Only use capital letters inside strings and for some class selectors.#[sup &lowast;]
          li #[sup &lowast;]Casing for classnames/mixins are #[a discussed elsewhere].
          li Always use #[code under_score_lower_case], never hyphens, for Less variables.
          li Lower case and shorthand hex color values.
          li Always put spaces immediatlely inside braces #[strong if they are on the same line].
          li.
            Always put spaces following colons in CSS rules, and
            following semicolons when multiple CSS rules share a line and in inline styles.
          li.
            Omit spaces between comma-separated property values
            (to avoid confusion between these and space-separated property values).
          li Always use single-quotes for all strings in CSS.
          li Always use a semicolon to finish a CSS rule, even the last one, even in inline styles.
          li Use the #[a(href="https://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS") 1TBS] brace style:
            figure: pre.
              .selector {
                margin: 0 0 1rem;
                line-height: 1.25;
              }
        table.demo
          thead: tr
            th(scope="col") Correct
            th(scope="col") Incorrect
          tbody
            tr
              td: code body { font-family: 'Helvetica',sans-serif; }
              td: code BODY { Font-Family: 'Helvetica', Sans-Serif; }
            tr
              td: code @h1_font_size: 2rem;
              td: code @h1-font-size: 2rem;
            tr
              td: code color: #cf9;
              td: code color: #CCFF99;
            tr
              td: code .column-5 { width: 20%; margin-left: 80%; }
              td: code .column-5 {width:20%;margin-left:80%}
            tr
              td: code .class::before { content: 'text'; }
              td: code .class::before { content: "text"; }
      +newSection(Docs.DOCS.find('code.html#js-specifics'), 3)
        ul
          li In scripting (JS, PHP):
            ul
              li class names use #[code PascalCase]
              li function/method names use #[code camelCase]
              li variable names use #[code under_score_lower_case]
              li constant names use #[code UNDER_SCORE_UPPER_CASE]
          li Always put spaces immediatlely inside braces #[strong if they are on the same line].
          li Always put spaces before open parentheses and after control keywords, but never after names of functions.
          li Always use single-quotes for all strings in JS.
          li.
            Use the #[a(href="https://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS") 1TBS] brace style
            and #[a(href="https://docs.npmjs.com/misc/coding-style") npm&rsquo;s coding style].
            (In case of conflict, this styleguide overrides npm&rsquo;s style.)
        figure: pre.
          var foo = 1
            , bar = 2
            , qux = 3
          var obj = {
            one: 1
          , two: 2
          , th3: 3
          }
          var arr = [
            'one', 'two', 'th3'
          , 'foR', 'fiv', 'six'
          , 'sev', 'ate', 'nyn'
          ]
          function TestSubject(name, adopted) {
            Person.call(this, name, adopted)
            if (typeof adopted == 'boolean') {
              this.is_adopted = adopted
            } else { this.is_adopted = false }
          }
          ;(function sayMyName(testSubject) {
            console.log(testSubject.name)
          })(new TestSubject('Chell', function () { return true }))
    +newSection(Docs.DOCS.find('code.html#accessibility'))
      ul
        li Always provide the #[code html[lang]] attribute.
        li Always provide text for the #[code img[alt]] attribute.
        li Provide text for the #[code a[title]] attribute if the link has non-textual content.
        li For #[code table] elements:
          ul
            li.
              insert the #[code caption], #[code thead], and #[code tfoot] elements (in that order)
              #[em before] the #[code tbody] element(s)
            li.
              always nest #[code tr] elements inside either #[code thead], #[code tfoot], or
              #[code tbody] elements; never directly inside #[code table]
            li.
              always nest #[code th] and #[code td] elements directly inside #[code tr] elements
            li.
              only use #[code th] elements when there is a single row and single column of headers
              (the single row must be in exactly one of the
              #[code thead], #[code tfoot], or #[code tbody] elements)
            li.
              always provide the #[code th[scope]] attribute
        li
          p.
            When adding a link to one element, wrap the #[code &lt;a&gt;] tag around
            the #[em outside] of the element to be linked.
          figure: pre.
            &lt;a&gt;&lt;code&gt;this is correct because the entire element is linked&lt;/code&gt;&lt;/a&gt;
            &lt;a href="//widgetsgalore.com" itemprop="url"&gt;&lt;span itemprop="name"&gt;Widgets Galore, Inc.&lt;/span&gt;&lt;/a&gt;
          p There are a few exceptions:
          ul
            li when inside the element there is more content not to be linked
            li when the link is marked up with microdata and needs to be nested inside the correct item
          figure: pre.
            &lt;code&gt;&lt;a&gt;only do this if there is&lt;/a&gt; more, non-linked content inside the element&lt;/code&gt;
            &lt;section itemscope="" itemtype="http://schema.org/Organization"&gt;
              &lt;a href="//widgetsgalore.com" itemprop="url"&gt;
                &lt;!-- Wrap the `a` tag around all the content inside the `section` tag,
                  instead of around the `section` tag itself. --&gt;
                &lt;h1 itemprop="name"&gt;Widgets Galore, Inc.&lt;/h1&gt;
                &lt;img src="//widgetsgalore.com/logo" itemprop="image"/&gt;
                &lt;p itemprop="description"&gt;Our company provides &hellip; &lt;/p&gt;
              &lt;/a&gt;
            &lt;/section&gt;
        li.
          Use exactly one #[code dfn] element per vocabulary term per page, and
          always provide the #[code dfn[id]] attribute.
        li.
          Use exactly one #[code abbr] element per abbreviation/acronym per page, and
          always provide the #[code abbr[id]] and #[code abbr[title]] attributes.
    +newSection(Docs.DOCS.find('code.html#optimization'))
      ul
        li
          | Never use any of the following elements or attributes. Use CSS to achieve the desired effect.
          ul
            li: code font
            li: code hr
            li: code [align]
            li: code [border]
        li.
          Omit the #[code [type]] attribute from the
          #[code &lt;link&gt;], #[code &lt;style&gt;], and #[code &lt;script&gt;] tags,
          but only if the value is default (#[code type="text/css"] or #[code type="text/javascript"])
        li
          p Attributes should have the following precedence and thus shall be written in the following order:
          ol
            li: code class
            li: code id
            li any attributes starting with #[code data-]
            li.
              any other #[a(href="https://www.w3.org/TR/html/dom.html#global-attributes") HTML global attributes]
              not on this list (#[code style], #[code title], #[code lang], #[code tabindex], etc.)
              in any order
            li.
              any HTML element-specific attributes
              (#[code href], #[code src], #[code rel], #[code alt], etc.)
              in any order
            li
              | ARIA attributes in the following order:
              ol
                li: code role
                li.
                  any #[a(href="https://www.w3.org/TR/wai-aria-1.1/#global_states") ARIA global attributes]
                  (#[code aria-hidden], #[code aria-current], #[code aria-label], etc.) in any order
                li.
                  any ARIA role-specific attributes
                  (#[code aria-expanded], #[code aria-checked], #[code aria-readonly], etc.)
                  in any order
            li
              | Microdata attributes in the following order:
              ol
                li: code itemprop
                li: code itemscope
                li: code itemtype
                li: code itemid
                li: code itemref
          p: small ARIA and Microdata attributes, though global, are listed last to improve readability.
          p Examples:
          figure: pre.
            &lt;a data-name="index-1" href="//google.com/" aria-label="Google website" itemprop="url" itemscope="" itemtype="//schema.org/URL"&gt;click here&lt;/a&gt;
            &lt;img class="my-img" id="img1" data-type="jpeg" src="//google.com/logo.jpg" alt="the Google logo" role="presentation"/&gt;
      ul
        li Use unitless CSS values of 0.
        li Always use unitless line height.
      table.demo
        thead: tr
          th(scope="col") Correct
          th(scope="col") Incorrect
        tbody
          tr
            td: code margin: 0;
            td: code margin: 0px;
          tr
            td: code line-height: 1.25;
            td: code line-height: 1.25em; line-height: 20px;
    +newSection(Docs.DOCS.find('code.html#commenting'))
      +newSection(Docs.DOCS.find('code.html#formatting'), 3)
        p Comment formatting is best shown by example:
        figure: pre.
          // Where available, always use
          // inline syntax for block comments
          // (of course as well as inline),
          // with each line beginning with
          // two slashes and a space.

          //- In the Jade language, comments
          //- hidden from the output are as shown here.

          /*
           * If inline syntax is unavailable, use this format.
           * Notice the opening and closing delimiters are on their own line,
           * and lines of text begin with asterisks horizontally aligned
           * with the delimiters. (#[a(href="https://en.wikipedia.org/wiki/Javadoc#Structure_of_a_Javadoc_comment") JavaDoc commenting] adds a second asterisk
           * in the opening delimiter.)
           */

          /* Use this format for a single line if there&rsquo;s no inline syntax. */

          &lt;!-- this is a good comment! --&gt;
          &lt;!--this is a bad comment!--&gt;

          // this is a good comment!
          //this is a bad commment!

          /* this is a good comment! */
          /*this is a bad comment!*/
      +newSection(Docs.DOCS.find('code.html#usage'), 3)
        p.
          This section describes the style we will be using to place comments in our codebase.
          It pertains mostly to CSS code, but it may be used for JavaScript as well. There is not
          much use for comments in HTML (which, as a markup language, is self-descriptive).
        p.
          In general, well-commented code has one main function: to provide communication
          among developers. This means to other people on your team, but also to yourself in the future.
          Use comments to thoroughly document your code,
          but from a high level&mdash;there is no need to describe every little line or detail.
          #[strong Good code should speak for itself.]
        p: small
          strong Aside: 
          a(href="http://stackoverflow.com/questions/4947213/does-anyone-know-of-a-css-documentation-tool") some tools
          |  attempt to automatically generate documentation from a rigorous syntax in comments.
          |  These are worth looking into.
        p.
          There are three levels of commenting: those that deliniate the architecture of a file,
          those that describe individual code structures, and small developer notes.
        +newSection(Docs.DOCS.find('code.html#architectural'), 4)
          p.
            Use comments to create a table of contents and headers in your source code.
            This is useful for big files that need to be split up into sections.
            It&rsquo;s good practice to include the filenames at the top of each partial so that
            they outline the files when concatenated.
            See #[a(href="#css-stylesheets") CSS anatomy] below for examples.
        +newSection(Docs.DOCS.find('code.html#structural'), 4)
          p.
            Each code structure (pattern, object, component, class, function, etc.)
            deserves its own comment explaining
            what it is, how it works, when/why it should be used, and its benefits and limitations.
            In this comment it&rsquo;s good practice to also include meta-data such as author and
            date created/modified.
          figure: pre.
            // The Pullquote component is used when authors want to use a block quotation to highlight
            // extracted inline text, for example, from an article.
            // Use this Component on the `blockquote` Element if the original source is less than 40 words
            // and does not have paragraph breaks.
            // It should not contain `p` Elements: Pullquotes should be short and sweet.
            //
            // ^subcomponents
            // : `.c-Pullquote__Src` - credit to the source if applicable
            // ^example
            // : &lt;blockquote class="c-Pullquote" cite="//example.com/portal2/quotes"&gt;
            // :   Look at you, soaring through the air like an eagle&hellip; piloting a blimp.
            // :   &lt;cite class="c-Pullquote__Src"&gt;GLaDOS&lt;/cite&gt;
            // : &lt;/blockquote&gt;
            // ^author
            // : Chris Harvey
            // ^updated
            // : 2015-05-22
            .c-Pullquote {
              ...
            }
            .c-Pullquote__Src {
              ...
            }
        +newSection(Docs.DOCS.find('code.html#developmental'), 4)
          p.
            These are small, one-line comments explaining why some particular thing was done.
            These comments are very likely to be mixed in with the code itself.
            Use them sparingly, for cases in which the code is not obvious;
            too many of these comments can be overwhelming.
            For example, use them when you use #[code !important] in CSS,
            or when you use #[dfn#magic-number magic numbers]&mdash;numbers that just so happen
            to work in their given situation (like, #[q what does this 18px come from?]).
    +newSection(Docs.DOCS.find('code.html#file-anatomy'))
      +newSection(Docs.DOCS.find('code.html#css-stylesheets'), 3)
        p.
          Every main stylesheet should have the following components, in the order listed,
          at the top of the stylesheet.
        ol
          li repository metadata
          li any direct CSS imports
          li filename
          li any #[code (reference)] or #[code (inline)] Less imports
          li table of contents
          li Furthermore, any stylesheet may have any number of section or subsection headings.
        +newSection(Docs.DOCS.find('code.html#repository-metadata'), 4)
          p.
            Include a comment block of information about the repository in the
            repository&rsquo;s main file. #[small #[i: code conf] is the example name of the repository.]
          figure: pre.
            /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*\
                conf
                Version: 0.2.0
                Licence: MIT
                Repo   : https://github.com/asce-web/conf.git
                Home   : http://conf.style.asce.org/
                Author : http://www.asce.org/
            \*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
        +newSection(Docs.DOCS.find('code.html#direct-css-imports'), 4)
          p These are pure-CSS statements of the following form.
          figure: pre @import url('normalize.css');
          p.
            In a Less file, upon compilation, these lines get moved to the top of the output file
            and remain verbatim, which means no parsing is done (unlike Less imports mentioned below).
          p
            strong Remember:
            |  If you&rsquo;re writing a pure CSS file, put these statments above the metadata block.
          p.
            Though these imports make coding CSS easier, they are not recommended; instead,
            use #[code &lt;link rel="stylesheet" href="normalize.css"/&gt;] at the top of each
            document that links the would-be-importing stylesheet.
        +newSection(Docs.DOCS.find('code.html#filename'), 4)
          p.
            Put the filename in a comment block after the meta block and any CSS imports.
            The filename for the main stylesheet has a slightly different style than that for the partials.
          p.
            Notice how like the meta block, these comments use block syntax so they
            get compiled into the output.
            #[a(href="#section-and-subsection-headings") Lower-level comments] not
            necessary to include in the output use inline comment syntax.
          figure
            figcaption main stylesheet filename:
            pre.
              /*================================*\
                  conf.less
              \*================================*/
          figure
            figcaption partial stylesheet filename (prepended by repo name for clarity):
            pre.
              /*################################*\
                  conf  |  base.less
              \*################################*/
        +newSection(Docs.DOCS.find('code.html#less-imports'), 4)
          p.
            You can use #[a(href="http://lesscss.org/features/#import-directives-feature") Less imports],
            reference or inline, to import partials into a main stylesheet.
            These go after the filename comment block, because any code injected inline
            should be done so underneath.
        +newSection(Docs.DOCS.find('code.html#table-contents'), 4)
          p.
            There are two types of table-of-contents. The first type is used in the main stylesheet
            to describe each imported partial. The second may be used within a partial stylesheet
            to delineate its sections and subsections.
          p.
            A table of contents really helps keep your codebase organized and proides a catalog
            of all the pieces of a project or file. While upkeep maintenance takes some time,
            this can be seen as an investment for a lot of time and confusion saved later on.
          figure: pre.
            /*
             * Table Of Contents
             *
             * normalize.css.................imported from Nicolas Gallagher
             * dev.css.......................development mode: fixes for imported stylesheets
             *
             * # BASE------------------------BARE UNCLASSED ELEMENTS
             * sections.css..................secioning content and section-related elements
             * grouping.css..................grouping content
             * text.css......................text-level and inline elements
             *
             * # OBJECTS---------------------REUSABLE STRUCTURAL PATTERNS
             * Box.css.......................[description]
             * Textbox.css...................[description]
             *
             * # COMPONENTS------------------SPECIFIC STYLE PATTERNS
             *
             *   ## TYPOGRAPHIC
             *   Document.css..................[description]
             *   Lede.css......................[description]
             *   Caption.css...................[description]
             *   Pullquote.css.................[description]
             *
             *   ## UI (USER INTERACTION)
             *   Alert.css.....................[description]
             *   Label.css.....................[description]
             *
             * # OVERRIDES-------------------[DESCRIPTION]
             * atoms.css.....................project-specific one-liners
             * shame.css.....................hacks and styles without a proper home
             */
          p.
            Within partials or sub-files, keep sections and subsections only two levels deep.
            Keep in mind the #[i Inception rule]&mdash;#[strong three levels is too deep].
            If you need that kind of
            complexity, it&rsquo;s better to split up the stylesheet into smaller files.
          figure: pre.
            // Table Of Contents
            // # HORIZONTAL GRID
            //   ## Widths
            //   ## Lines and units
            //   ## Automated box widths
            // # VERTICAL GRID
            //   ## Font size and line height
            //   ## Padding, margin, border
        +newSection(Docs.DOCS.find('code.html#section-and-subsection-headings'), 4)
          p.
            Use inline comments to begin and end sections and subsections with headings.
            The #[abbr(title="pound signs") hashes (#[code #])] make find(-and-replace) much easier.
            Only subsections and their code are indented.
          figure: pre.
            //++++++++++++++++++++++++++++++++//
            //    # HORIZONTAL GRID
            //++++++++++++++++++++++++++++++++//
            ... code goes here ...
              //--------------------------------//
              //    ## Lines and units
              //--------------------------------//
              ... code goes here ...
              //---- end ## Lines and units ----//
            ... code goes here ...
            //++++ end # HORIZONTAL GRID ++++//
      //- section#js-class-files(style="background-color: rgba(255,170,85,0.5); color: red;")
        p(style="font-weight:bold;font-size:3rem;text-align:center;") DRAFT
        h3 JS Class Files
