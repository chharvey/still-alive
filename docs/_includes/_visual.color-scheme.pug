mixin colorBox(color)
  section.o-Grid__Item.o-Box.-w-1o2.js-colorbox(class=[color.bg_class, (color.is_dark) ? 'h-darkbg' : ''] style={
    'border-radius': '0',
  })
    mixin description()
      //- p Sample description.
    block
    h4.ColorTitle= color.name
    pre.ColorCode= color.code_dfn + ' == ' + color.code_hex
    +description()
    if (color.uses && color.uses[0])
      ul
        each el in color.uses
          li= el
mixin colorBoxTrans(color, n, section_specs, transbox_specs)
  - section_specs = section_specs || {}
  section.o-Grid__Item.o-Box.-w-1o2.js-colorbox(class=['data-'+color.bg_class, (color.is_dark) ? 'h-darkbg' : ''] style={
    'border-radius': '0',
    'background-color': color.box_color.code_hex
  } data-overlap-color=color.code_hexa.slice(5,12) data-overlap-alpha=color.code_hexa.slice(-4,-1))&attributes(section_specs)
    - var numbers = ['One','Two','Three','Four','Five','Six','Seven','Eight','Nine']
    mixin translabel(text, number)
      p.c-TransLabel
        = text
        code.ColorCode.-ml-h.js-mix(data-overlap-number=number)
    mixin transbox(i, specs)
      - specs = specs || {}
      if i < n
        div.o-Box.o-Box--mill(class=[color.bg_class])&attributes(specs)
          +translabel(numbers[i], i+1)
          +transbox(i+1, specs)
    h4.ColorTitle Overlapping #{color.name}
    form
      label
        | background color:
        input.js-rowbc-swatch(type="color" value=color.box_color.code_hex)
      input.js-reset-swatch(type="reset")
    pre.ColorCode= color.code_dfn + ' == ' + color.code_hexa
    div.o-Box.o-Box--mill
      +translabel('Zero', 0)
      +transbox(0, transbox_specs)
footer: p.
  Based on the
  #[a(rel="external" href="http://www.thinkwithportals.com/"): cite Portal] video game series.
section.o-Grid
  h3.o-Grid__Item Main Portal Colors
  +colorBox(Docs.COLOR_SCHEME.aperturewhite)
    mixin description()
      p.
        The purity of Aperture Science in all its glory. This dazzling
        brilliance of bluish light seen on the portalable panels coated with
        Conversion Gel makes the background emit an eerie glow, like the full moon.
  +colorBox(Docs.COLOR_SCHEME.apertureblack)
    mixin description()
      p.
        The polar opposite of Aperture White. Representing the true dark nature
        of the Enrichment Center, this is the color of the panels that inhibit
        portals. A hint of orange is infinitesimally noticeable. What better way to
        complement the background color than the color of normal text?
  +colorBox(Docs.COLOR_SCHEME.lakesuperior)
    mixin description()
      p.
        This Great Lake borders #[a Ontonagon, MI], the location of the
        Aperture Science Enrichment Center. A perfect fit for superior headings on
        a page.
  +colorBox(Docs.COLOR_SCHEME.facilityabyss)
    mixin description()
      p.
        This color can be seen in the endless depths of the subterranean
        testing facility. This color is for #[i minor] headings of a page.
  +colorBox(Docs.COLOR_SCHEME.atlas)
    mixin description()
      p.
        Short and stout, Atlas is one of the two robots used for testing.
        Untouched hyperlinks are dedicated to his digital iris.
  +colorBox(Docs.COLOR_SCHEME.pbody)
    mixin description()
      p.
        Tall and wiry, P-body is one of the two robots used for testing.
        Hovered hyperlinks are dedicated to his (or her?) digital iris.
  +colorBox(Docs.COLOR_SCHEME.cavescaves)
    mixin description()
      p.
        Cave&rsquo;s underground salt mines were the ideal venue for early
        test chambers.
  +colorBox(Docs.COLOR_SCHEME.asbestos)
    mixin description()
      p.
        The forgotten underground test chambers are ridden with this harmful
        substance. Or so Mr.&nbsp;Johnson says.
  +colorBox(Docs.COLOR_SCHEME.repulsion)
    mixin description()
      p.
        Good news, you&rsquo;re not part of the control group; you get the gel.
        Bad news, it does #[em not] like the human skeleton. Turns out you might
        just break every bone in your legs anyway.
  +colorBox(Docs.COLOR_SCHEME.propulsion)
    mixin description()
      p #[i Forwarding] the cause of science.
section.o-Grid
  h3.o-Grid__Item UI Component Colors
  +colorBox(Docs.COLOR_SCHEME.graylite)
  +colorBox(Docs.COLOR_SCHEME.graydark)
  +colorBox(Docs.COLOR_SCHEME.deploying)
    mixin description()
      p.
        The one word you never want to hear without a portal gun. Just as the
        iris of a Sentry Turret, this color is briefly seen, providing a subtle accent
        on the site.
  +colorBox(Docs.COLOR_SCHEME.hereye)
    mixin description()
      p.
        This color alone will scare the
        prokaryotic-microorganism-infested-fecal-matter out of you. See where you can
        find it. You monster.
  +colorBox(Docs.COLOR_SCHEME.neurotoxin)
    mixin description()
      p.
        Long ago an #[i accident] resulted in the unleashing of
        this deadly vapor and the murdering of the entire human staff of
        Aperture Laboratories. Some say it could happen again, but this time on the
        test subjects&hellip;
  +colorBox(Docs.COLOR_SCHEME.bridges)
    mixin description()
      p.
        Hard Light Bridges are literally massless, yet they can sustain
        infinite weight, as Chell can attest to.
  +colorBox(Docs.COLOR_SCHEME.companion)
    mixin description()
      p.
        Believed to be sentient by some and alive by others, the
        Weighted Companion Cube has been said to provide advice and display emotions
        such as brevity, care, and love. It is even believed to hum opera when near
        a friend. A perfect color for helpful elements on a Web page.
  +colorBox(Docs.COLOR_SCHEME.vilify)
    mixin description()
      p: q.-fs-t(cite="https://www.youtube.com/watch?v=G-Vg2YS-sFE").
        You&rsquo;ve
        got sucker&rsquo;s luck. Have you given up? Does it feel
        like a trial? Does it trouble your mind the way you trouble mine?
section.o-Grid
  h3.o-Grid__Item Tints &amp; Shades
  +colorBoxTrans(Docs.TRANS_SCHEME.tintlight,  7, { class: 'h-darkbg' })
  +colorBoxTrans(Docs.TRANS_SCHEME.shadelight, 7)
  +colorBoxTrans(Docs.TRANS_SCHEME.tintheavy,  4, { class: 'h-darkbg' }, { class: '-c-b' })
  +colorBoxTrans(Docs.TRANS_SCHEME.shadeheavy, 4, {},                    { class: 'h-darkbg' })
aside.o-Box.o-Box--kilo-sG.o-Box--mega-sT(style={
  'margin-bottom': '1.5rem'
, 'border': '1px solid #9acc7a'
, 'margin-top': '-2px'
, 'background': 'rgba(0, 0, 0, 0.05)'
, 'box-shadow': 'inset 0 0 0.5rem 0rem rgba(0,0,0,0.2)'
})
  h3.-ta-c Overlapping Opacity
  p.c-Subhead Calculating the Perceived Alpha Value
  p.
    The common intuition that overlapping alphas are simply added
    is incorrect. For example, a block with an opacity of 0.4 in front of another block
    with an opacity of 0.6 does not result in a total opacity of 1.0. It actually results
    in an opacity of 0.76. The fact of the matter is that no matter how many translucent
    blocks overlap (as long as their alphas are less than 1), you will never get something
    completely opaque. (You may get very close, like 0.99991, but not exactly 1.0.)
    This implies that the model for overlapping opacities is some sort of
    exponential decay#[sup: a.Rf#rf-decay(href="#fn-decay") 1]
    that increasingly and asymptotically approaches 1.0.
  p.
    To cut to the chase, the formula used to calculate the final resulting alpha,
    call it #[span.js-mt \alpha], from a given number of alphas,
    #[span.js-mt \alpha_1, \alpha_2, \dots, \alpha_n], is
  p.js-mb \alpha = 1 - \bigl[\left(1-\alpha_1\right)\left(1-\alpha_2\right)\cdots\left(1-\alpha_n\right)\bigr]
  p Therefore the true resulting opacity from two overlapping blocks with opacity 0.4 and 0.6 is
  p.js-mb(style="min-height:7.5rem;").
    \begin{align}
      \alpha
      &= 1 - \left(1-0.6\right)\left(1-0.4\right) \\
      &= 1-\left(0.4\right)\left(0.6\right) \\
      &= 1-0.24 \\
      &= 0.76
    \end{align}
  p.
    If all of the alphas are a constant #[span.js-mt \alpha_1], however, we may convert
    this formula into a function of one variable: the number of overlapping blocks.
    This results in our desired increasing exponential decay function. Indeed,
    its right-hand limit is 1.
  p.js-mb \alpha(n;\alpha_1) = 1 - \left(1-\alpha_1\right)^n
  footer: ul.c-ListFootnotes
    li.
      #[sup: a.Fn#fn-decay(href="#rf-decay") 1]
      I call it exponential #[em decay] because the base of the exponent is less than 1.
      This is true even if the function itself is increasing.
      It would only be called exponential #[em growth] if the base were more than 1,
      again, whether the function were increasing or decreasing.
